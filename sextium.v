
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module sextium(

	//////////// CLOCK //////////
	input 		          		CLOCK_50,
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7,

	//////////// LCD //////////
	output		          		LCD_BLON,
	inout 		     [7:0]		LCD_DATA,
	output		          		LCD_EN,
	output		          		LCD_ON,
	output		          		LCD_RS,
	output		          		LCD_RW,

	//////////// RS232 //////////
	input 		          		UART_CTS,
	output		          		UART_RTS,
	input 		          		UART_RXD,
	output		          		UART_TXD,

	//////////// PS2 for Keyboard and Mouse //////////
	inout 		          		PS2_CLK,
	inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT,
	inout 		          		PS2_DAT2,

	//////////// SDCARD //////////
	output		          		SD_CLK,
	inout 		          		SD_CMD,
	inout 		     [3:0]		SD_DAT,
	input 		          		SD_WP_N,

	//////////// I2C for EEPROM //////////
	output		          		EEP_I2C_SCLK,
	inout 		          		EEP_I2C_SDAT,

	//////////// USB 2.0 OTG (Cypress CY7C67200) //////////
	output		     [1:0]		OTG_ADDR,
	output		          		OTG_CS_N,
	inout 		    [15:0]		OTG_DATA,
	input 		          		OTG_INT,
	output		          		OTG_RD_N,
	output		          		OTG_RST_N,
	output		          		OTG_WE_N,

	//////////// SDRAM //////////
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [31:0]		DRAM_DQ,
	output		     [3:0]		DRAM_DQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_WE_N,

	//////////// SRAM //////////
	output		    [19:0]		SRAM_ADDR,
	output		          		SRAM_CE_N,
	inout 		    [15:0]		SRAM_DQ,
	output		          		SRAM_LB_N,
	output		          		SRAM_OE_N,
	output		          		SRAM_UB_N,
	output		          		SRAM_WE_N,

	//////////// Flash //////////
	output		    [22:0]		FL_ADDR,
	output		          		FL_CE_N,
	inout 		     [7:0]		FL_DQ,
	output		          		FL_OE_N,
	output		          		FL_RST_N,
	input 		          		FL_RY,
	output		          		FL_WE_N,
	output		          		FL_WP_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	inout 		    [35:0]		GPIO
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire clock, reset;
	wire mem_read, mem_write, io_read, io_write, io_mem_write, ioack;
	wire [15:0] mem_bus_in, mem_bus_out, io_bus_in, io_bus_out, addr_bus;
	wire [3:0] insn;
//	wire slowclock;
//	wire soft_reset;

	wire to_uart_data, to_uart_error, to_uart_valid, to_uart_ready, from_uart_data, from_uart_error, from_uart_valid,	from_uart_ready;

	
//=======================================================
//  Structural coding
//=======================================================

//	assign clock = CLOCK_50;
	assign reset = KEY[0];
	assign stepclock = KEY[1];
	assign selclock = SW[17];
	assign SRAM_LB_N = 0;
	assign SRAM_UB_N = 0;
	assign SRAM_CE_N = 0;
	assign SRAM_OE_N = ~mem_read;
	assign SRAM_WE_N = ~(mem_write | io_mem_write);
	assign SRAM_DQ = mem_write ? (io_mem_write ? io_bus_out : mem_bus_out) : 16'bZ; // TODO an actual memory controller is needed
	assign SRAM_ADDR[15:0] = addr_bus;
	assign SRAM_ADDR[19:16] = 0;
	assign LEDG[0] = mem_read;
	assign LEDG[1] = mem_write;
	assign LEDG[2] = io_read;
	assign LEDG[3] = io_write;

	assign mem_bus_in = SRAM_DQ;

	assign slowclock = CLOCK_50;
	
	sextium_core core(.clock(clock), .reset(reset), .mem_bus_in(mem_bus_in), .mem_bus_out(mem_bus_out), .addr_bus(addr_bus),
		.io_bus_in(io_bus_in), .io_bus_out(io_bus_out),
		.mem_read(mem_read), .mem_write(mem_write), .io_read(io_read), .io_write(io_write), .ioack(ioack),
		.insn(insn));
	
//	sextium_io_uart io_uart(.clock(clock), .reset(reset), .io_bus_in(io_bus_out), .io_bus_out(io_bus_in), .io_read(io_read), .io_write(io_write), .ioack(ioack),
//		.from_uart_ready(from_uart_ready), .to_uart_data(to_uart_data), .to_uart_error(to_uart_error), .to_uart_valid(to_uart_valid),
//		.to_uart_ready(to_uart_ready), .from_uart_data(from_uart_data), .from_uart_error(from_uart_error), .from_uart_valid(from_uart_valid),
//		.soft_reset(soft_reset), .io_mem_write(io_mem_write));
	
//	slowclock clockgen(.areset(1), .inclk0(CLOCK_50), .c0(slowclock));

//	rs232_uart uart(.clk(CLOCK_50), .reset(reset), .UART_RXD(UART_RXD), .UART_TXD(UART_TXD),
//		.from_uart_ready(from_uart_ready), .to_uart_data(to_uart_data), .to_uart_error(to_uart_error), .to_uart_valid(to_uart_valid),
//		.to_uart_ready(to_uart_ready), .from_uart_data(from_uart_data), .from_uart_error(from_uart_error), .from_uart_valid(from_uart_valid));
	
////	segment7_hex_decoder insn_s7(.oe(1), .hex(insn), .out(HEX0));
	
	segment7_hex_decoder_x4 addr_s7(.oe(1), .hex(addr_bus), .out1(HEX2), .out2(HEX3), .out3(HEX4), .out4(HEX5));

	assign clock = slowclock;
	//mux2#(1) clockmux(.sel(selclock), .in1(slowclock), .in2(stepclock), .out(clock));
	
endmodule
